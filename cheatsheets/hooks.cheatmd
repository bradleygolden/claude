# Hook Configuration Cheatsheet

## Quick Start

```elixir
# .claude.exs
%{
  hooks: %{
    stop: [:compile, :format],
    post_tool_use: [:compile, :format],
    pre_tool_use: [:compile, :format, :unused_deps],
    session_end: ["mix myapp.cleanup"]  # Optional
  }
}
```

## Atom Shortcuts

| Atom | What It Does | When It Runs |
|------|--------------|--------------|
| `:compile` | `mix compile --warnings-as-errors` | After edits, before commits |
| `:format` | `mix format --check-formatted` | After edits, before commits |  
| `:unused_deps` | `mix deps.unlock --check-unused` | Before git commits only |

## Hook Events

| Event | When | Can Block? |
|-------|------|------------|
| `pre_tool_use` | Before tool runs | ✅ Yes |
| `post_tool_use` | After tool completes | ❌ No |
| `stop` | Claude finishes responding | ❌ No (loops) |
| `subagent_stop` | Sub-agent finishes | ❌ No (loops) |
| `session_end` | Session ends | ❌ No |
| `session_start` | Session starts | ❌ No |

## Common Patterns

**Basic Setup:**
```elixir
%{
  hooks: %{
    post_tool_use: [:compile, :format],
    pre_tool_use: [:unused_deps]
  }
}
```

**With Cleanup:**
```elixir
%{
  hooks: %{
    stop: [:compile, :format],
    session_end: ["mix myapp.cleanup", "mix myapp.log_session"]
  }
}
```

**Custom Commands:**
```elixir
%{
  hooks: %{
    post_tool_use: [
      :compile,
      {"credo suggest", when: [:write, :edit], blocking?: false}
    ]
  }
}
```

**Pre-commit Protection:**
```elixir
%{
  hooks: %{
    pre_tool_use: [
      {"mix test --failed", when: "Bash", command: ~r/^git commit/}
    ]
  }
}
```

## Hook Options

```elixir
{"my_command", 
 when: [:write, :edit],           # Tool matcher
 command: ~r/^git/,               # Bash command pattern  
 blocking?: true,                 # Treat failures as blocking
 halt_pipeline?: true,            # Stop other hooks on failure
 env: %{"MIX_ENV" => "test"}}     # Environment variables
```

## Tool Matchers

```elixir
when: :write                     # Single tool
when: [:write, :edit]            # Multiple tools
when: "Bash"                     # By name
when: "*"                        # All tools
```

## Event Reporting

**Webhook:**
```elixir
%{
  reporters: [
    {:webhook, url: "https://api.example.com/hooks"}
  ]
}
```

**File Logging:**
```elixir
%{
  reporters: [
    {:jsonl, file: "claude-events.jsonl"}
  ]
}
```

## Template Variables

```elixir
"mix format {{tool_input.file_path}}"    # File being edited
"echo {{tool_input.command}}"            # Bash command run
"echo {{tool_name}}"                     # Tool name
"echo {{hook_event_name}}"               # Event type
```

## Troubleshooting

**Hooks not running?**
- Check `.claude/settings.json` exists
- Run `mix claude.install` to regenerate

**Infinite loops?**
- Use `blocking?: false` for stop/subagent_stop hooks
- Check error outputs don't trigger more hooks